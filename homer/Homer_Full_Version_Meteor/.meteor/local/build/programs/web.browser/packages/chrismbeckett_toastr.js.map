)]}'
{"version":3,"file":"/packages/chrismbeckett:toastr.js","sources":["chrismbeckett:toastr/lib/toastr.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,E;AACA,S;AACA,mE;AACA,uB;AACA,6F;AACA,iG;AACA,E;AACA,wC;AACA,8B;AACA,+C;AACA,G;AACA,sB;AACA,qC;AACA,6B;AACA,2B;AACA,yB;AACA,4B;AACA,6B;AACA,+B;AACA,6B;AACA,mC;AACA,kC;AACA,c;;AAEA,0B;AACA,6B;AACA,+B;AACA,6B;AACA,2C;AACA,2B;AACA,4B;AACA,qC;AACA,iC;AACA,iC;AACA,gC;AACA,c;;AAEA,8B;;AAEA,0B;;AAEA,wC;AACA,6D;AACA,+B;AACA,0C;AACA,8D;AACA,qC;AACA,qD;AACA,gC;AACA,mB;AACA,a;;AAEA,oD;AACA,yD;AACA,0D;AACA,wC;AACA,sC;AACA,iB;AACA,4B;AACA,0D;AACA,iB;AACA,kC;AACA,a;;AAEA,4D;AACA,+B;AACA,yC;AACA,6D;AACA,qC;AACA,qD;AACA,gC;AACA,mB;AACA,a;;AAEA,0C;AACA,oC;AACA,a;;AAEA,+D;AACA,+B;AACA,4C;AACA,gE;AACA,qC;AACA,qD;AACA,gC;AACA,mB;AACA,a;;AAEA,+D;AACA,+B;AACA,4C;AACA,gE;AACA,qC;AACA,qD;AACA,gC;AACA,mB;AACA,a;;AAEA,2C;AACA,2C;AACA,2D;AACA,0D;AACA,4C;AACA,iB;AACA,a;;AAEA,4C;AACA,2C;AACA,2D;AACA,+E;AACA,+C;AACA,2B;AACA,iB;AACA,mD;AACA,wC;AACA,iB;AACA,a;AACA,wB;;AAEA,sC;;AAEA,6C;AACA,0D;AACA,qE;AACA,6D;AACA,kB;AACA,a;;AAEA,wD;AACA,+E;AACA,uD;AACA,uD;AACA,mD;AACA,6E;AACA,uB;AACA,gC;AACA,iB;AACA,6B;AACA,a;;AAEA,+C;AACA,wC;AACA,oD;AACA,oD;AACA,gD;AACA,2C;;AAEA,uD;AACA,kC;AACA,a;;AAEA,oC;AACA,wB;AACA,uC;AACA,wC;AACA,mD;AACA,iC;;AAEA,6F;AACA,sC;AACA,iF;AACA,uC;AACA,0C;AACA,uC;AACA,wC;AACA,wC;;AAEA,0C;AACA,kC;AACA,6C;AACA,2C;AACA,iD;AACA,gD;AACA,sB;AACA,4C;AACA,qD;AACA,4F;AACA,8C;AACA,kD;AACA,mC;AACA,0D;AACA,sC;AACA,6C;AACA,sC;AACA,kB;AACA,a;;AAEA,oC;AACA,0C;AACA,+B;AACA,a;;AAEA,kC;AACA,2C;AACA,mE;;AAEA,8C;AACA,sD;AACA,+B;AACA,qB;AACA,yB;AACA,oD;AACA,qB;AACA,iB;;AAEA,mE;AACA,qE;AACA,2E;AACA,iB;;AAEA,0B;;AAEA,yD;AACA,sC;AACA,gD;AACA,gD;AACA,kD;AACA,mD;AACA,yD;AACA,mC;AACA,yC;AACA,sC;AACA,yC;AACA,sB;AACA,gC;AACA,yC;AACA,yC;AACA,8C;AACA,yC;AACA,gC;AACA,sB;;AAEA,oC;AACA,mF;AACA,iB;;AAEA,gC;AACA,iF;AACA,wD;AACA,iB;;AAEA,kC;AACA,uF;AACA,0D;AACA,iB;;AAEA,0C;AACA,wF;AACA,yD;AACA,iB;;AAEA,0C;AACA,gE;AACA,4D;AACA,iB;;AAEA,qC;AACA,0C;AACA,sD;AACA,wB;AACA,qD;AACA,iB;;;AAGA,kD;AACA,6G;AACA,kB;;AAEA,0C;AACA,wE;AACA,0E;AACA,yF;AACA,8C;AACA,iF;AACA,qB;AACA,iB;;AAEA,mE;AACA,+D;AACA,mD;AACA,iB;;AAEA,2D;AACA,0D;AACA,qD;AACA,oD;AACA,sG;AACA,sD;AACA,yB;AACA,wC;AACA,uB;AACA,iB;;AAEA,sC;AACA,qD;AACA,0C;AACA,oC;AACA,uB;AACA,iB;;AAEA,kC;;AAEA,+C;AACA,0C;AACA,iB;;AAEA,qC;;AAEA,8C;AACA,yE;AACA,+B;AACA,qB;AACA,yD;AACA,8D;AACA,uD;AACA,mD;AACA,+C;AACA,uD;AACA,kF;AACA,mD;AACA,6B;AACA,sD;AACA,0D;AACA,8C;AACA,yB;AACA,uB;AACA,iB;;AAEA,6C;AACA,6E;AACA,oF;AACA,sF;AACA,6F;AACA,qB;AACA,iB;;AAEA,wC;AACA,6C;AACA,4C;AACA,uE;AACA,sF;AACA,sB;AACA,iB;;AAEA,2C;AACA,sH;AACA,6D;AACA,iB;AACA,a;;AAEA,mC;AACA,mE;AACA,a;;AAEA,iD;AACA,iE;AACA,mD;AACA,2B;AACA,iB;AACA,uC;AACA,qC;AACA,yD;AACA,wC;AACA,iB;AACA,a;AACA,wB;;AAEA,a;AACA,O;AACA,kF;AACA,iE;AACA,oD;AACA,Y;AACA,qD;AACA,K;AACA,I","sourcesContent":["/*\n * Toastr\n * Copyright 2012-2014 John Papa, Hans Fjällemark, and Tim Ferrell.\n * All Rights Reserved.\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\n * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php\n *\n * Author: John Papa and Hans Fjällemark\n * ARIA Support: Greta Krafsig\n * Project: https://github.com/CodeSeven/toastr\n */\n; (function (define) {\n    define(['jquery'], function ($) {\n        return (function () {\n            var $container;\n            var listener;\n            var toastId = 0;\n            var toastType = {\n                error: 'error',\n                info: 'info',\n                success: 'success',\n                warning: 'warning'\n            };\n\n            var toastr = {\n                clear: clear,\n                remove: remove,\n                error: error,\n                getContainer: getContainer,\n                info: info,\n                options: {},\n                subscribe: subscribe,\n                success: success,\n                version: '2.1.0',\n                warning: warning\n            };\n\n            var previousToast;\n\n            return toastr;\n\n            //#region Accessible Methods\n            function error(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.error,\n                    iconClass: getOptions().iconClasses.error,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function getContainer(options, create) {\n                if (!options) { options = getOptions(); }\n                $container = $('#' + options.containerId);\n                if ($container.length) {\n                    return $container;\n                }\n                if(create) {\n                    $container = createContainer(options);\n                }\n                return $container;\n            }\n\n            function info(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.info,\n                    iconClass: getOptions().iconClasses.info,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function subscribe(callback) {\n                listener = callback;\n            }\n\n            function success(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.success,\n                    iconClass: getOptions().iconClasses.success,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function warning(message, title, optionsOverride) {\n                return notify({\n                    type: toastType.warning,\n                    iconClass: getOptions().iconClasses.warning,\n                    message: message,\n                    optionsOverride: optionsOverride,\n                    title: title\n                });\n            }\n\n            function clear($toastElement) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if (!clearToast($toastElement, options)) {\n                    clearContainer(options);\n                }\n            }\n\n            function remove($toastElement) {\n                var options = getOptions();\n                if (!$container) { getContainer(options); }\n                if ($toastElement && $(':focus', $toastElement).length === 0) {\n                    removeToast($toastElement);\n                    return;\n                }\n                if ($container.children().length) {\n                    $container.remove();\n                }\n            }\n            //#endregion\n\n            //#region Internal Methods\n\n            function clearContainer(options){\n                var toastsToClear = $container.children();\n                for (var i = toastsToClear.length - 1; i >= 0; i--) {\n                    clearToast($(toastsToClear[i]), options);\n                };\n            }\n\n            function clearToast($toastElement, options){\n                if ($toastElement && $(':focus', $toastElement).length === 0) {\n                    $toastElement[options.hideMethod]({\n                        duration: options.hideDuration,\n                        easing: options.hideEasing,\n                        complete: function () { removeToast($toastElement); }\n                    });\n                    return true;\n                }\n                return false;\n            }\n\n            function createContainer(options) {\n                $container = $('<div/>')\n                    .attr('id', options.containerId)\n                    .addClass(options.positionClass)\n                    .attr('aria-live', 'polite')\n                    .attr('role', 'alert');\n\n                $container.appendTo($(options.target));\n                return $container;\n            }\n\n            function getDefaults() {\n                return {\n                    tapToDismiss: true,\n                    toastClass: 'toast',\n                    containerId: 'toast-container',\n                    debug: false,\n\n                    showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery\n                    showDuration: 300,\n                    showEasing: 'swing', //swing and linear are built into jQuery\n                    onShown: undefined,\n                    hideMethod: 'fadeOut',\n                    hideDuration: 1000,\n                    hideEasing: 'swing',\n                    onHidden: undefined,\n\n                    extendedTimeOut: 1000,\n                    iconClasses: {\n                        error: 'toast-error',\n                        info: 'toast-info',\n                        success: 'toast-success',\n                        warning: 'toast-warning'\n                    },\n                    iconClass: 'toast-info',\n                    positionClass: 'toast-top-right',\n                    timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky\n                    titleClass: 'toast-title',\n                    messageClass: 'toast-message',\n                    target: 'body',\n                    closeHtml: '<button>&times;</button>',\n                    newestOnTop: true,\n                    preventDuplicates: false,\n                    progressBar: false\n                };\n            }\n\n            function publish(args) {\n                if (!listener) { return; }\n                listener(args);\n            }\n\n            function notify(map) {\n                var options = getOptions(),\n                    iconClass = map.iconClass || options.iconClass;\n\n                if(options.preventDuplicates){\n                    if(map.message === previousToast){\n                        return;\n                    }\n                    else{\n                        previousToast = map.message;\n                    }\n                }\n\n                if (typeof (map.optionsOverride) !== 'undefined') {\n                    options = $.extend(options, map.optionsOverride);\n                    iconClass = map.optionsOverride.iconClass || iconClass;\n                }\n\n                toastId++;\n\n                $container = getContainer(options, true);\n                var intervalId = null,\n                    $toastElement = $('<div/>'),\n                    $titleElement = $('<div/>'),\n                    $messageElement = $('<div/>'),\n                    $progressElement = $('<div/>'),\n                    $closeElement = $(options.closeHtml),\n                    progressBar = {\n                        intervalId: null,\n                        hideEta: null,\n                        maxHideTime: null\n                    },\n                    response = {\n                        toastId: toastId,\n                        state: 'visible',\n                        startTime: new Date(),\n                        options: options,\n                        map: map\n                    };\n\n                if (map.iconClass) {\n                    $toastElement.addClass(options.toastClass).addClass(iconClass);\n                }\n\n                if (map.title) {\n                    $titleElement.append(map.title).addClass(options.titleClass);\n                    $toastElement.append($titleElement);\n                }\n\n                if (map.message) {\n                    $messageElement.append(map.message).addClass(options.messageClass);\n                    $toastElement.append($messageElement);\n                }\n\n                if (options.closeButton) {\n                    $closeElement.addClass('toast-close-button').attr(\"role\", \"button\");\n                    $toastElement.prepend($closeElement);\n                }\n\n                if (options.progressBar) {\n                    $progressElement.addClass('toast-progress');\n                    $toastElement.prepend($progressElement);\n                }\n\n                $toastElement.hide();\n                if (options.newestOnTop) {\n                    $container.prepend($toastElement);\n                } else {\n                    $container.append($toastElement);\n                }\n\n\n                $toastElement[options.showMethod](\n                    { duration: options.showDuration, easing: options.showEasing, complete: options.onShown }\n                );\n\n                if (options.timeOut > 0) {\n                    intervalId = setTimeout(hideToast, options.timeOut);\n                    progressBar.maxHideTime = parseFloat(options.timeOut);\n                    progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                    if (options.progressBar) {\n                        progressBar.intervalId = setInterval(updateProgress, 10);\n                    }\n                }\n\n                $toastElement.hover(stickAround, delayedHideToast);\n                if (!options.onclick && options.tapToDismiss) {\n                    $toastElement.click(hideToast);\n                }\n\n                if (options.closeButton && $closeElement) {\n                    $closeElement.click(function (event) {\n                        if( event.stopPropagation ) {\n                            event.stopPropagation();\n                        } else if( event.cancelBubble !== undefined && event.cancelBubble !== true ) {\n                            event.cancelBubble = true;\n                        }\n                        hideToast(true);\n                    });\n                }\n\n                if (options.onclick) {\n                    $toastElement.click(function () {\n                        options.onclick();\n                        hideToast();\n                    });\n                }\n\n                publish(response);\n\n                if (options.debug && console) {\n                    console.log(response);\n                }\n\n                return $toastElement;\n\n                function hideToast(override) {\n                    if ($(':focus', $toastElement).length && !override) {\n                        return;\n                    }\n                    clearTimeout(progressBar.intervalId);\n                    return $toastElement[options.hideMethod]({\n                        duration: options.hideDuration,\n                        easing: options.hideEasing,\n                        complete: function () {\n                            removeToast($toastElement);\n                            if (options.onHidden && response.state !== 'hidden') {\n                                options.onHidden();\n                            }\n                            response.state = 'hidden';\n                            response.endTime = new Date();\n                            publish(response);\n                        }\n                    });\n                }\n\n                function delayedHideToast() {\n                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {\n                        intervalId = setTimeout(hideToast, options.extendedTimeOut);\n                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);\n                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;\n                    }\n                }\n\n                function stickAround() {\n                    clearTimeout(intervalId);\n                    progressBar.hideEta = 0;\n                    $toastElement.stop(true, true)[options.showMethod](\n                        { duration: options.showDuration, easing: options.showEasing }\n                    );\n                }\n\n                function updateProgress() {\n                    var percentage = ((progressBar.hideEta - (new Date().getTime())) / progressBar.maxHideTime) * 100;\n                    $progressElement.width(percentage + '%');\n                }\n            }\n\n            function getOptions() {\n                return $.extend({}, getDefaults(), toastr.options);\n            }\n\n            function removeToast($toastElement) {\n                if (!$container) { $container = getContainer(); }\n                if ($toastElement.is(':visible')) {\n                    return;\n                }\n                $toastElement.remove();\n                $toastElement = null;\n                if ($container.children().length === 0) {\n                    $container.remove();\n                }\n            }\n            //#endregion\n\n        })();\n    });\n}(typeof define === 'function' && define.amd ? define : function (deps, factory) {\n    if (typeof module !== 'undefined' && module.exports) { //Node\n        module.exports = factory(require('jquery'));\n    } else {\n        window['toastr'] = factory(window['jQuery']);\n    }\n}));\n"]}