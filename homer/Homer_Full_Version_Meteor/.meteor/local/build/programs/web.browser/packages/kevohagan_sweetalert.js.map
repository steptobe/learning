)]}'
{"version":3,"sources":["kevohagan:sweetalert/sweetalert/lib/sweet-alert.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,a;AACA,kC;AACA,6B;AACA,yC;;AAEA,oC;AACA,sC;AACA,gF;AACA,uB;AACA,kB;AACA,iB;AACA,mB;AACA,iC;AACA,gC;AACA,gC;AACA,6B;AACA,4B;AACA,gC;AACA,sC;AACA,mC;AACA,uB;AACA,wB;AACA,oB;AACA,wB;AACA,oB;AACA,wB;AACA,6B;AACA,yB;AACA,Q;;;AAGA,I;AACA,mB;AACA,K;;AAEA,6B;AACA,oD;;AAEA,kB;AACA,6B;AACA,0B;AACA,K;;AAEA,kB;AACA,I;;AAEA,6B;AACA,2B;AACA,gB;AACA,0C;AACA,K;AACA,I;AACA,2B;AACA,gD;AACA,I;AACA,wC;AACA,8E;AACA,I;AACA,wC;AACA,qC;AACA,wC;AACA,K;AACA,I;AACA,2C;AACA,wE;AACA,oC;AACA,4D;AACA,gE;AACA,O;AACA,0D;AACA,K;AACA,I;AACA,8B;AACA,4C;AACA,kD;AACA,yB;AACA,I;AACA,0B;AACA,4B;AACA,iC;AACA,I;AACA,0B;AACA,iC;AACA,0B;AACA,K;AACA,4C;AACA,sB;AACA,K;AACA,I;AACA,0B;AACA,4B;AACA,gC;AACA,I;AACA,0B;AACA,iC;AACA,0B;AACA,K;AACA,4C;AACA,sB;AACA,K;AACA,I;AACA,0C;AACA,gC;AACA,2B;AACA,4B;AACA,oB;AACA,O;AACA,6B;AACA,K;AACA,iB;AACA,I;AACA,iC;AACA,gC;AACA,iC;;AAEA,mC;AACA,gB;AACA,0D;AACA,qF;AACA,Y;AACA,oD;AACA,K;;AAEA,yB;AACA,gC;AACA,2D;AACA,I;AACA,qC;AACA,kC;AACA,gC;AACA,6B;AACA,mC;AACA,6B;AACA,6B;AACA,6E;AACA,2B;;AAEA,sC;AACA,qC;AACA,S;AACA,Q;AACA,a;AACA,K;AACA,gD;AACA,I;AACA,sC;AACA,8B;AACA,2B;AACA,2B;AACA,2B;AACA,2E;AACA,yB;;AAEA,oC;AACA,mC;AACA,c;AACA,oC;AACA,O;AACA,M;AACA,W;AACA,I;AACA,8B;AACA,uH;AACA,6C;AACA,2C;AACA,4B;AACA,0C;AACA,qB;AACA,uB;AACA,wB;AACA,S;AACA,+B;AACA,wC;AACA,iB;AACA,oD;AACA,2C;AACA,8B;AACA,4C;AACA,iC;AACA,qD;AACA,qB;AACA,K;AACA,I;AACA,sC;AACA,6E;AACA,kD;AACA,0B;AACA,yB;AACA,6E;AACA,uC;AACA,K;AACA,I;;AAEA,oF;AACA,4B;AACA,4B;AACA,wB;;;AAGA,I;AACA,+B;AACA,K;;AAEA,yC;AACA,y3B;AACA,kD;;AAEA,oC;;AAEA,8B;AACA,kC;AACA,sD;AACA,K;AACA,I;;;;AAIA,I;AACA,+B;AACA,K;AACA,uB;AACA,E;AACA,kC;AACA,sC;;AAEA,8C;;AAEA,iB;;AAEA,M;AACA,6E;AACA,4E;AACA,8E;AACA,O;AACA,qC;AACA,gC;;AAEA,6C;AACA,yB;AACA,c;AACA,kC;AACA,O;AACA,K;;AAEA,qC;AACA,yD;AACA,mB;AACA,K;;AAEA,2C;;AAEA,kC;;AAEA,mD;AACA,oB;AACA,oC;AACA,0C;AACA,0C;;AAEA,c;;AAEA,uE;AACA,oB;AACA,+C;AACA,8C;AACA,uB;AACA,S;;AAEA,0C;;AAEA,gC;AACA,iB;AACA,iB;AACA,wB;AACA,8B;AACA,8B;AACA,6B;AACA,2B;AACA,0B;AACA,kB;AACA,+B;AACA,6B;AACA,qB;AACA,sB;AACA,iB;AACA,sB;AACA,2B;AACA,uB;;AAEA,oE;AACA,iD;AACA,4E;AACA,yD;AACA,6D;AACA,S;;AAEA,qE;AACA,4G;AACA,2E;;AAEA,sD;AACA,yD;;AAEA,c;;AAEA,c;AACA,yG;AACA,qB;;AAEA,K;;AAEA,0B;AACA,0B;AACA,gB;;;AAGA,yB;AACA,2B;;AAEA,yB;AACA,yC;AACA,oC;AACA,4C;AACA,4E;AACA,kF;AACA,0D;AACA,gH;;AAEA,uB;AACA,2B;AACA,6D;AACA,4F;AACA,W;AACA,gB;AACA,0B;AACA,6D;AACA,qE;AACA,W;AACA,gB;AACA,2B;AACA,6D;AACA,4F;AACA,W;AACA,gB;AACA,yB;AACA,6D;AACA,4F;AACA,W;AACA,gB;AACA,uB;AACA,qE;AACA,oE;;AAEA,gC;AACA,mD;AACA,kB;AACA,oD;AACA,W;AACA,gB;AACA,uB;AACA,6F;AACA,4B;AACA,qG;AACA,2B;AACA,mF;AACA,+B;AACA,W;AACA,gB;AACA,O;AACA,M;;AAEA,8B;AACA,+B;;AAEA,0C;AACA,2D;AACA,Q;AACA,6B;AACA,6B;AACA,S;AACA,O;;AAEA,yC;;AAEA,kC;AACA,2B;AACA,O;AACA,K;;AAEA,6B;AACA,iF;AACA,kF;AACA,2H;;AAEA,kC;AACA,mC;AACA,O;;AAEA,iC;AACA,2B;AACA,O;AACA,K;;AAEA,oD;AACA,+C;AACA,8C;AACA,8C;AACA,8C;AACA,8C;AACA,8C;AACA,8C;AACA,K;;AAEA,yC;;;AAGA,4B;AACA,0D;AACA,6D;AACA,mE;;;AAGA,mC;AACA,oC;AACA,yC;;AAEA,iD;AACA,qD;AACA,e;AACA,O;;AAEA,oD;;AAEA,qF;AACA,sD;AACA,kD;AACA,uB;AACA,gB;AACA,S;AACA,O;;AAEA,0B;AACA,c;AACA,8B;AACA,2D;AACA,qC;AACA,gB;AACA,qC;AACA,sD;AACA,8C;AACA,kB;AACA,yD;AACA,W;AACA,S;;AAEA,gC;AACA,+B;;AAEA,wC;AACA,mE;AACA,S;;AAEA,c;AACA,6B;AACA,mD;AACA,uC;AACA,8B;AACA,W;;AAEA,gC;AACA,uD;AACA,uC;AACA,kB;AACA,sD;AACA,uC;AACA,W;AACA,sE;AACA,yC;AACA,uC;AACA,gB;AACA,kD;AACA,qC;AACA,S;AACA,O;AACA,K;;AAEA,6C;;AAEA,qC;;;AAGA,M;AACA,kD;AACA,O;;AAEA,qC;AACA,uC;AACA,uD;AACA,6C;AACA,yD;;AAEA,8B;AACA,0F;;AAEA,wC;AACA,4F;AACA,6D;AACA,wD;AACA,8B;AACA,uB;AACA,gB;AACA,c;;AAEA,mC;AACA,2F;AACA,sC;AACA,c;AACA,mB;AACA,8D;AACA,gD;AACA,Y;AACA,U;AACA,Q;;AAEA,uC;AACA,2C;;AAEA,iC;AACA,+E;AACA,oC;AACA,2F;AACA,oC;AACA,8C;AACA,oC;AACA,wC;AACA,S;AACA,Y;AACA,M;AACA,I;;;AAGA,I;AACA,sC;AACA,+B;AACA,K;AACA,oE;AACA,sB;AACA,gD;AACA,K;AACA,yC;AACA,uD;AACA,K;;AAEA,sC;AACA,I;;;AAGA,I;AACA,wC;AACA,K;;AAEA,kC;AACA,2B;;AAEA,2C;AACA,yC;AACA,0D;AACA,4D;;AAEA,Y;AACA,wG;;AAEA,W;AACA,2G;;AAEA,sB;AACA,kB;AACA,K;;AAEA,kB;AACA,6B;AACA,0C;AACA,kE;AACA,Y;AACA,oD;AACA,gE;AACA,sC;AACA,kD;AACA,K;;AAEA,W;AACA,6C;AACA,kC;AACA,4B;AACA,mD;AACA,4C;AACA,2B;AACA,gB;AACA,S;AACA,O;AACA,uB;AACA,qD;AACA,qB;AACA,O;;AAEA,mE;AACA,gB;;AAEA,uD;AACA,uE;AACA,oB;AACA,O;;AAEA,8B;;AAEA,qB;AACA,4B;;AAEA,uB;AACA,qC;AACA,wE;AACA,0E;AACA,gB;;AAEA,qB;AACA,8C;AACA,sE;AACA,gB;;AAEA,uB;AACA,0C;AACA,uE;AACA,sE;AACA,gB;;AAEA,qB;AACA,sB;AACA,wD;AACA,wC;AACA,iC;AACA,2B;AACA,mE;AACA,kB;AACA,gB;AACA,O;AACA,K;;AAEA,mB;AACA,0B;AACA,kE;;AAEA,yE;AACA,wB;;AAEA,0B;AACA,0B;;AAEA,6B;AACA,gE;AACA,uC;AACA,uC;;AAEA,sC;AACA,wG;AACA,gB;AACA,gC;AACA,iC;AACA,S;AACA,O;AACA,sI;AACA,K;;AAEA,0B;AACA,0E;AACA,kC;AACA,gD;AACA,Y;AACA,uB;AACA,K;;AAEA,2B;AACA,4E;AACA,mC;AACA,iD;AACA,Y;AACA,wB;AACA,K;;AAEA,8C;AACA,kC;AACA,iE;AACA,K;AACA,mC;AACA,mE;AACA,K;;AAEA,oC;AACA,wD;AACA,oE;;AAEA,iD;AACA,4D;AACA,K;;AAEA,2B;AACA,4E;;AAEA,oB;AACA,+D;AACA,kE;;AAEA,4C;AACA,mD;AACA,uD;AACA,iF;AACA,Y;AACA,kD;AACA,K;;AAEA,kB;AACA,mD;AACA,G;;;AAGA,I;AACA,+H;AACA,K;;AAEA,qC;AACA,0B;AACA,iD;AACA,yB;AACA,sD;AACA,K;AACA,mB;;AAEA,+C;AACA,wB;AACA,6B;AACA,0C;AACA,6E;AACA,uC;AACA,K;;AAEA,e;AACA,G;;AAEA,wB;AACA,wB;AACA,kC;AACA,wB;AACA,O;AACA,K;;AAEA,a;AACA,G;;AAEA,0B;AACA,uE;AACA,qH;AACA,G;;AAEA,sE;AACA,4C;AACA,qC;AACA,wG;AACA,G;;;AAGA,iC;AACA,wB;AACA,2B;AACA,6B;AACA,gB;AACA,sC;AACA,yC;;AAEA,mD;AACA,0D;AACA,sB;;AAEA,2B;AACA,iC;AACA,Y;;AAEA,iD;;AAEA,2C;AACA,6C;AACA,2B;AACA,gB;AACA,K;AACA,G;;;AAGA,kC;AACA,8C;AACA,2B;;AAEA,6B;AACA,sB;AACA,yC;AACA,sC;AACA,kC;;;AAGA,4B;;AAEA,kE;AACA,yC;AACA,4E;AACA,8E;;AAEA,8D;AACA,gD;AACA,wE;;AAEA,kE;AACA,8C;AACA,2E;AACA,0E;;;AAGA,iD;;AAEA,2C;AACA,6C;AACA,gC;AACA,oC;AACA,K;AACA,kC;AACA,gC;AACA,I;;;AAGA,I;AACA,kD;AACA,mE;AACA,K;;AAEA,4E;AACA,2B;;AAEA,4D;AACA,iC;;AAEA,qE;AACA,sC;;AAEA,gE;;AAEA,yC;AACA,I;;AAEA,yB;AACA,4B;AACA,4B;;AAEA,sC;AACA,sB;AACA,yD;;AAEA,2B;AACA,G;;AAEA,uE;AACA,+B;AACA,wC;AACA,mB;AACA,K;AACA,I;AACA,4B;;AAEA,6D;AACA,oC;;AAEA,sE;AACA,yC;AACA,I;AACA,E;;;AAGA,I;AACA,oE;AACA,K;;AAEA,kC;AACA,2B;;AAEA,qD;AACA,G;;AAEA,sC;AACA,oB;AACA,yD;AACA,kB;AACA,Y;AACA,mB;AACA,K;AACA,G;;AAEA,kC;AACA,2B;AACA,kC;AACA,kD;AACA,K;AACA,G;;AAEA,mD;AACA,8C;AACA,+D;AACA,gC;AACA,6C;AACA,iD;AACA,G;;AAEA,qB","file":"/packages/kevohagan_sweetalert.js","sourcesContent":["// SweetAlert\n// 2014-2015 (c) - Tristan Edwards\n// github.com/t4t5/sweetalert\n;(function(window, document, undefined) {\n\n  var modalClass   = '.sweet-alert',\n      overlayClass = '.sweet-overlay',\n      alertTypes   = ['error', 'warning', 'info', 'success', 'input', 'prompt'],\n      defaultParams = {\n        title: '',\n        text: '',\n        type: null,\n        allowOutsideClick: false,\n        showConfirmButton: true,\n        showCancelButton: false,\n        closeOnConfirm: true,\n        closeOnCancel: true,\n        confirmButtonText: 'OK',\n        confirmButtonColor: '#AEDEF4',\n        cancelButtonText: 'Cancel',\n        imageUrl: null,\n        imageSize: null,\n        timer: null,\n        customClass: '',\n        html: false,\n        animation: true,\n        allowEscapeKey: true,\n        inputType: 'text'\n      };\n\n\n  /*\n   * Manipulate DOM\n   */\n\n  var getModal = function() {\n    var $modal = document.querySelector(modalClass);\n\n    if (!$modal) {\n      sweetAlertInitialize();\n      $modal = getModal();\n    }\n\n    return $modal;\n  };\n\n  var getInput = function() {\n    var modal = getModal();\n    if (modal) {\n      return modal.querySelector('input');\n    }\n  },\n  getOverlay = function() {\n    return document.querySelector(overlayClass);\n  },\n  hasClass = function(elem, className) {\n    return new RegExp(' ' + className + ' ').test(' ' + elem.className + ' ');\n  },\n  addClass = function(elem, className) {\n    if (!hasClass(elem, className)) {\n      elem.className += ' ' + className;\n    }\n  },\n  removeClass = function(elem, className) {\n    var newClass = ' ' + elem.className.replace(/[\\t\\r\\n]/g, ' ') + ' ';\n    if (hasClass(elem, className)) {\n      while (newClass.indexOf(' ' + className + ' ') >= 0) {\n        newClass = newClass.replace(' ' + className + ' ', ' ');\n      }\n      elem.className = newClass.replace(/^\\s+|\\s+$/g, '');\n    }\n  },\n  escapeHtml = function(str) {\n    var div = document.createElement('div');\n    div.appendChild(document.createTextNode(str));\n    return div.innerHTML;\n  },\n  _show = function(elem) {\n    elem.style.opacity = '';\n    elem.style.display = 'block';\n  },\n  show = function(elems) {\n    if (elems && !elems.length) {\n      return _show(elems);\n    }\n    for (var i = 0; i < elems.length; ++i) {\n      _show(elems[i]);\n    }\n  },\n  _hide = function(elem) {\n    elem.style.opacity = '';\n    elem.style.display = 'none';\n  },\n  hide = function(elems) {\n    if (elems && !elems.length) {\n      return _hide(elems);\n    }\n    for (var i = 0; i < elems.length; ++i) {\n      _hide(elems[i]);\n    }\n  },\n  isDescendant = function(parent, child) {\n    var node = child.parentNode;\n    while (node !== null) {\n      if (node === parent) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n    return false;\n  },\n  getTopMargin = function(elem) {\n    elem.style.left = '-9999px';\n    elem.style.display = 'block';\n\n    var height = elem.clientHeight,\n        padding;\n    if (typeof getComputedStyle !== \"undefined\") { // IE 8\n      padding = parseInt(getComputedStyle(elem).getPropertyValue('padding-top'), 10);\n    } else {\n      padding = parseInt(elem.currentStyle.padding);\n    }\n\n    elem.style.left = '';\n    elem.style.display = 'none';\n    return ('-' + parseInt((height + padding) / 2) + 'px');\n  },\n  fadeIn = function(elem, interval) {\n    if (+elem.style.opacity < 1) {\n      interval = interval || 16;\n      elem.style.opacity = 0;\n      elem.style.display = 'block';\n      var last = +new Date();\n      var tick = function() {\n        elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;\n        last = +new Date();\n\n        if (+elem.style.opacity < 1) {\n          setTimeout(tick, interval);\n        }\n      };\n      tick();\n    }\n    elem.style.display = 'block'; //fallback IE8\n  },\n  fadeOut = function(elem, interval) {\n    interval = interval || 16;\n    elem.style.opacity = 1;\n    var last = +new Date();\n    var tick = function() {\n      elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;\n      last = +new Date();\n\n      if (+elem.style.opacity > 0) {\n        setTimeout(tick, interval);\n      } else {\n        elem.style.display = 'none';\n      }\n    };\n    tick();\n  },\n  fireClick = function(node) {\n    // Taken from http://www.nonobtrusive.com/2011/11/29/programatically-fire-crossbrowser-click-event-with-javascript/\n    // Then fixed for today's Chrome browser.\n    if (typeof MouseEvent === 'function') {\n      // Up-to-date approach\n      var mevt = new MouseEvent('click', {\n        view: window,\n        bubbles: false,\n        cancelable: true\n      });\n      node.dispatchEvent(mevt);\n    } else if ( document.createEvent ) {\n      // Fallback\n      var evt = document.createEvent('MouseEvents');\n      evt.initEvent('click', false, false);\n      node.dispatchEvent(evt);\n    } else if (document.createEventObject) {\n      node.fireEvent('onclick') ;\n    } else if (typeof node.onclick === 'function' ) {\n      node.onclick();\n    }\n  },\n  stopEventPropagation = function(e) {\n    // In particular, make sure the space bar doesn't scroll the main window.\n    if (typeof e.stopPropagation === 'function') {\n      e.stopPropagation();\n      e.preventDefault();\n    } else if (window.event && window.event.hasOwnProperty('cancelBubble')) {\n      window.event.cancelBubble = true;\n    }\n  };\n\n  // Remember state in cases where opening and handling a modal will fiddle with it.\n  var previousActiveElement,\n      previousWindowKeyDown,\n      lastFocusedButton;\n\n\n  /*\n   * Add modal + overlay to DOM\n   */\n\n  var sweetAlertInitialize = function() {\n    var sweetHTML = '<div class=\"sweet-overlay\" tabIndex=\"-1\"></div><div class=\"sweet-alert\"><div class=\"sa-icon sa-error\"><span class=\"sa-x-mark\"><span class=\"sa-line sa-left\"></span><span class=\"sa-line sa-right\"></span></span></div><div class=\"sa-icon sa-warning\"> <span class=\"sa-body\"></span> <span class=\"sa-dot\"></span> </div> <div class=\"sa-icon sa-info\"></div> <div class=\"sa-icon sa-success\"> <span class=\"sa-line sa-tip\"></span> <span class=\"sa-line sa-long\"></span> <div class=\"sa-placeholder\"></div> <div class=\"sa-fix\"></div> </div> <div class=\"sa-icon sa-custom\"></div> <h2>Title</h2><p>Text</p><fieldset><input type=\"text\" tabIndex=\"3\" /><div class=\"sa-input-error\"></div></fieldset> <div class=\"sa-error-container\"><div class=\"icon\">!</div> <p>Not valid!</p></div> <button class=\"cancel\" tabIndex=\"2\">Cancel</button><button class=\"confirm\" tabIndex=\"1\">OK</button></div>',\n        sweetWrap = document.createElement('div');\n\n    sweetWrap.innerHTML = sweetHTML;\n\n    // Append elements to body\n    while (sweetWrap.firstChild) {\n      document.body.appendChild(sweetWrap.firstChild);\n    }\n  };\n\n\n\n  /*\n   * Global sweetAlert function\n   */\n  var sweetAlert, swal;\n  \n  sweetAlert = swal = function() {\n    var customizations = arguments[0];\n\n    addClass(document.body, 'stop-scrolling');\n\n    resetInput();\n\n    /*\n     * Use argument if defined or default value from params object otherwise.\n     * Supports the case where a default value is boolean true and should be\n     * overridden by a corresponding explicit argument which is boolean false.\n     */\n    function argumentOrDefault(key) {\n      var args = customizations;\n\n      if (typeof args[key] !== 'undefined') {\n        return args[key];\n      } else {\n        return defaultParams[key];\n      }\n    }\n\n    if (arguments[0] === undefined) {\n      logStr('SweetAlert expects at least 1 attribute!');\n      return false;\n    }\n\n    var params = extend({}, defaultParams);\n\n    switch (typeof arguments[0]) {\n\n      // Ex: swal(\"Hello\", \"Just testing\", \"info\");\n      case 'string':\n        params.title = arguments[0];\n        params.text  = arguments[1] || '';\n        params.type  = arguments[2] || '';\n\n        break;\n\n      // Ex: swal({title:\"Hello\", text: \"Just testing\", type: \"info\"});\n      case 'object':\n        if (arguments[0].title === undefined) {\n          logStr('Missing \"title\" argument!');\n          return false;\n        }\n\n        params.title = arguments[0].title;\n\n        var availableCustoms = [\n          'text',\n          'type',\n          'customClass',\n          'allowOutsideClick',\n          'showConfirmButton',\n          'showCancelButton',\n          'closeOnConfirm',\n          'closeOnCancel',\n          'timer',\n          'confirmButtonColor',\n          'cancelButtonText',\n          'imageUrl',\n          'imageSize',\n          'html',\n          'animation',\n          'allowEscapeKey',\n          'inputType'];\n\n        // It would be nice to just use .forEach here, but IE8... :(\n        var numCustoms = availableCustoms.length;\n        for (var customIndex = 0; customIndex < numCustoms; customIndex++) {\n          var customName = availableCustoms[customIndex];\n          params[customName] = argumentOrDefault(customName);\n        }\n\n        // Show \"Confirm\" instead of \"OK\" if cancel button is visible\n        params.confirmButtonText  = (params.showCancelButton) ? 'Confirm' : defaultParams.confirmButtonText;\n        params.confirmButtonText  = argumentOrDefault('confirmButtonText');\n\n        // Function to call when clicking on cancel/OK\n        params.doneFunction       = arguments[1] || null;\n\n        break;\n\n      default:\n        logStr('Unexpected type of argument! Expected \"string\" or \"object\", got ' + typeof arguments[0]);\n        return false;\n\n    }\n\n    setParameters(params);\n    fixVerticalPosition();\n    openModal();\n\n\n    // Modal interactions\n    var modal = getModal();\n\n    // Mouse interactions\n    var onButtonEvent = function(event) {\n      var e = event || window.event;\n      var target = e.target || e.srcElement,\n          targetedConfirm    = (target.className.indexOf(\"confirm\") !== -1),\n          targetedOverlay    = (target.className.indexOf(\"sweet-overlay\") !== -1),\n          modalIsVisible     = hasClass(modal, 'visible'),\n          doneFunctionExists = (params.doneFunction && modal.getAttribute('data-has-done-function') === 'true');\n\n      switch (e.type) {\n        case (\"mouseover\"):\n          if (targetedConfirm && params.confirmButtonColor) {\n            target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -0.04);\n          }\n          break;\n        case (\"mouseout\"):\n          if (targetedConfirm && params.confirmButtonColor) {\n            target.style.backgroundColor = params.confirmButtonColor;\n          }\n          break;\n        case (\"mousedown\"):\n          if (targetedConfirm && params.confirmButtonColor) {\n            target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -0.14);\n          }\n          break;\n        case (\"mouseup\"):\n          if (targetedConfirm && params.confirmButtonColor) {\n            target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -0.04);\n          }\n          break;\n        case (\"focus\"):\n          var $confirmButton = modal.querySelector('button.confirm'),\n              $cancelButton  = modal.querySelector('button.cancel');\n\n          if (targetedConfirm) {\n            $cancelButton.style.boxShadow = 'none';\n          } else {\n            $confirmButton.style.boxShadow = 'none';\n          }\n          break;\n        case (\"click\"):\n          if (targetedConfirm && doneFunctionExists && modalIsVisible) { // Clicked \"confirm\"\n            handleConfirm();\n          } else if ((doneFunctionExists && modalIsVisible) || targetedOverlay) { // Clicked \"cancel\"\n            handleCancel();\n          } else if (isDescendant(modal, target) && target.tagName === \"BUTTON\") { \n            sweetAlert.close();\n          }\n          break;\n      }\n    };\n\n    function handleConfirm() {\n      var callbackValue = true;\n\n      if (hasClass(modal, 'show-input')) {\n        callbackValue = modal.querySelector('input').value;\n        \n        if (!callbackValue) {\n          callbackValue = \"\";\n        }\n      }\n\n      params.doneFunction(callbackValue);\n\n      if (params.closeOnConfirm) {\n        sweetAlert.close();\n      }\n    }\n\n    function handleCancel() {\n      // Check if callback function expects a parameter (to track cancel actions)\n      var functionAsStr          = String(params.doneFunction).replace(/\\s/g, '');\n      var functionHandlesCancel  = functionAsStr.substring(0, 9) === \"function(\" && functionAsStr.substring(9, 10) !== \")\";\n\n      if (functionHandlesCancel) {\n        params.doneFunction(false);\n      }\n\n      if (params.closeOnCancel) {\n        sweetAlert.close();\n      }\n    }\n\n    var $buttons = modal.querySelectorAll('button');\n    for (var i = 0; i < $buttons.length; i++) {\n      $buttons[i].onclick     = onButtonEvent;\n      $buttons[i].onmouseover = onButtonEvent;\n      $buttons[i].onmouseout  = onButtonEvent;\n      $buttons[i].onmousedown = onButtonEvent;\n      $buttons[i].onmouseup   = onButtonEvent;\n      $buttons[i].onfocus     = onButtonEvent;\n    }\n\n    getOverlay().onclick = onButtonEvent;\n\n\n    // Keyboard interactions\n    var $okButton = modal.querySelector('button.confirm'),\n        $cancelButton = modal.querySelector('button.cancel'),\n        $modalButtons = modal.querySelectorAll('button[tabindex]');\n\n\n    function handleKeyDown(event) {\n      var e = event || window.event;\n      var keyCode = e.keyCode || e.which;\n\n      if ([9,13,32,27].indexOf(keyCode) === -1) {\n        // Don't do work on keys we don't care about.\n        return;\n      }\n\n      var $targetElement = e.target || e.srcElement;\n\n      var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.\n      for (var i = 0; i < $modalButtons.length; i++) {\n        if ($targetElement === $modalButtons[i]) {\n          btnIndex = i;\n          break;\n        }\n      }\n\n      if (keyCode === 9) {\n        // TAB\n        if (btnIndex === -1) {\n          // No button focused. Jump to the confirm button.\n          $targetElement = $okButton;\n        } else {\n          // Cycle to the next button\n          if (btnIndex === $modalButtons.length - 1) {\n            $targetElement = $modalButtons[0];\n          } else {\n            $targetElement = $modalButtons[btnIndex + 1];\n          }\n        }\n\n        stopEventPropagation(e);\n        $targetElement.focus();\n\n        if (params.confirmButtonColor) {\n          setFocusStyle($targetElement, params.confirmButtonColor);\n        }\n\n      } else {\n        if (keyCode === 13) {\n          if ($targetElement.tagName === \"INPUT\") {\n            $targetElement = $okButton;\n            $okButton.focus();\n          }\n\n          if (btnIndex === -1) {\n            // ENTER/SPACE clicked outside of a button.\n            $targetElement = $okButton;\n          } else {\n            // Do nothing - let the browser handle it.\n            $targetElement = undefined;\n          }\n        } else if (keyCode === 27 && params.allowEscapeKey === true) {\n          $targetElement = $cancelButton;\n          fireClick($targetElement, e);\n        } else {\n          // Fallback - let the browser handle it.\n          $targetElement = undefined;\n        }\n      }\n    }\n\n    previousWindowKeyDown = window.onkeydown;\n\n    window.onkeydown = handleKeyDown;\n\n\n    /*\n     * Makes stuff unselectable. Is it needed? -->\n     */\n\n    // function handleOnBlur(event) {\n    //   var e = event || window.event;\n    //   var $targetElement = e.target || e.srcElement,\n    //       $focusElement = e.relatedTarget,\n    //       modalIsVisible = hasClass(modal, 'visible');\n\n    //   if (modalIsVisible) {\n    //     var btnIndex = -1; // Find the button - note, this is a nodelist, not an array.\n\n    //     if ($focusElement !== null) {\n    //       // If we picked something in the DOM to focus to, let's see if it was a button.\n    //       for (var i = 0; i < $modalButtons.length; i++) {\n    //         if ($focusElement === $modalButtons[i]) {\n    //           btnIndex = i;\n    //           break;\n    //         }\n    //       }\n\n    //       if (btnIndex === -1) {\n    //         // Something in the dom, but not a visible button. Focus back on the button.\n    //         $targetElement.focus();\n    //       }\n    //     } else {\n    //       // Exiting the DOM (e.g. clicked in the URL bar);\n    //       lastFocusedButton = $targetElement;\n    //     }\n    //   }\n    // }\n\n    // $okButton.onblur = handleOnBlur;\n    // $cancelButton.onblur = handleOnBlur;\n\n    window.onfocus = function() {\n      // When the user has focused away and focused back from the whole window.\n      window.setTimeout(function() {\n        // Put in a timeout to jump out of the event sequence. Calling focus() in the event\n        // sequence confuses things.\n        if (lastFocusedButton !== undefined) {\n          lastFocusedButton.focus();\n          lastFocusedButton = undefined;\n        }\n      }, 0);\n    };\n  };\n\n\n  /*\n   * Set default params for each popup\n   * @param {Object} userParams\n   */\n  sweetAlert.setDefaults = swal.setDefaults = function(userParams) {\n    if (!userParams) {\n      throw new Error('userParams is required');\n    }\n    if (typeof userParams !== 'object') {\n      throw new Error('userParams has to be a object');\n    }\n\n    extend(defaultParams, userParams);\n  };\n\n\n  /*\n   * Set type, text and actions on modal\n   */\n\n  function setParameters(params) {\n    var modal = getModal();\n\n    var $title = modal.querySelector('h2'),\n        $text = modal.querySelector('p'),\n        $cancelBtn = modal.querySelector('button.cancel'),\n        $confirmBtn = modal.querySelector('button.confirm');\n\n    // Title\n    $title.innerHTML = (params.html) ? params.title : escapeHtml(params.title).split(\"\\n\").join(\"<br>\");\n\n    // Text\n    $text.innerHTML = (params.html) ? params.text : escapeHtml(params.text || '').split(\"\\n\").join(\"<br>\");\n\n    if (params.text) {\n      show($text);\n    }\n\n    //Custom Class\n    if (params.customClass) {\n      addClass(modal, params.customClass);\n      modal.setAttribute('data-custom-class', params.customClass);\n    } else {\n      // Find previously set classes and remove them\n      var customClass = modal.getAttribute('data-custom-class');\n      removeClass(modal, customClass);\n      modal.setAttribute('data-custom-class', \"\");\n    }\n\n    // Icon\n    hide(modal.querySelectorAll('.sa-icon'));\n    if (params.type && !isIE8()) {\n      var validType = false;\n      for (var i = 0; i < alertTypes.length; i++) {\n        if (params.type === alertTypes[i]) {\n          validType = true;\n          break;\n        }\n      }\n      if (!validType) {\n        logStr('Unknown alert type: ' + params.type);\n        return false;\n      }\n\n      var typesWithIcons = ['success', 'error', 'warning', 'info'];\n      var $icon;\n\n      if (typesWithIcons.indexOf(params.type) !== -1) {\n        $icon = modal.querySelector('.sa-icon.' + 'sa-' + params.type);\n        show($icon);\n      }\n\n      var $input = getInput();\n\n      // Animate icon\n      switch (params.type) {\n\n        case \"success\":\n          addClass($icon, 'animate');\n          addClass($icon.querySelector('.sa-tip'), 'animateSuccessTip');\n          addClass($icon.querySelector('.sa-long'), 'animateSuccessLong');\n          break;\n\n        case \"error\":\n          addClass($icon, 'animateErrorIcon');\n          addClass($icon.querySelector('.sa-x-mark'), 'animateXMark');\n          break;\n\n        case \"warning\":\n          addClass($icon, 'pulseWarning');\n          addClass($icon.querySelector('.sa-body'), 'pulseWarningIns');\n          addClass($icon.querySelector('.sa-dot'), 'pulseWarningIns');\n          break;\n\n        case \"input\":\n        case \"prompt\":\n          $input.setAttribute('type', params.inputType);\n          addClass(modal, 'show-input');\n          setTimeout(function() {\n            $input.focus();\n            $input.addEventListener('keyup', swal.resetInputError);\n          }, 400);\n          break;\n      }\n    }\n\n    // Custom image\n    if (params.imageUrl) {\n      var $customIcon = modal.querySelector('.sa-icon.sa-custom');\n\n      $customIcon.style.backgroundImage = 'url(' + params.imageUrl + ')';\n      show($customIcon);\n\n      var _imgWidth  = 80,\n          _imgHeight = 80;\n\n      if (params.imageSize) {\n        var dimensions = params.imageSize.toString().split('x');\n        var imgWidth   = dimensions[0];\n        var imgHeight  = dimensions[1];\n\n        if (!imgWidth || !imgHeight) {\n          logStr(\"Parameter imageSize expects value with format WIDTHxHEIGHT, got \" + params.imageSize);\n        } else {\n          _imgWidth  = imgWidth;\n          _imgHeight = imgHeight;\n        }\n      }\n      $customIcon.setAttribute('style', $customIcon.getAttribute('style') + 'width:' + _imgWidth + 'px; height:' + _imgHeight + 'px');\n    }\n\n    // Show cancel button?\n    modal.setAttribute('data-has-cancel-button', params.showCancelButton);\n    if (params.showCancelButton) {\n      $cancelBtn.style.display = 'inline-block';\n    } else {\n      hide($cancelBtn);\n    }\n\n    // Show confirm button?\n    modal.setAttribute('data-has-confirm-button', params.showConfirmButton);\n    if (params.showConfirmButton) {\n      $confirmBtn.style.display = 'inline-block';\n    } else {\n      hide($confirmBtn);\n    }\n\n    // Edit text on cancel and confirm buttons\n    if (params.cancelButtonText) {\n      $cancelBtn.innerHTML = escapeHtml(params.cancelButtonText);\n    }\n    if (params.confirmButtonText) {\n      $confirmBtn.innerHTML = escapeHtml(params.confirmButtonText);\n    }\n\n    if (params.confirmButtonColor) {\n      // Set confirm button to selected background color\n      $confirmBtn.style.backgroundColor = params.confirmButtonColor;\n\n      // Set box-shadow to default focused button\n      setFocusStyle($confirmBtn, params.confirmButtonColor);\n    }\n\n    // Allow outside click?\n    modal.setAttribute('data-allow-ouside-click', params.allowOutsideClick);\n\n    // Done-function\n    var hasDoneFunction = (params.doneFunction) ? true : false;\n    modal.setAttribute('data-has-done-function', hasDoneFunction);\n\n    if (!params.animation) { // No animation\n      modal.setAttribute('data-animation', 'none');\n    } else if (typeof(params.animation) === \"string\") {\n      modal.setAttribute('data-animation', params.animation); // Custom animation\n    } else {\n      modal.setAttribute('data-animation', 'pop');\n    }\n\n    // Close timer\n    modal.setAttribute('data-timer', params.timer);\n  }\n\n\n  /*\n   * Set hover, active and focus-states for buttons (source: http://www.sitepoint.com/javascript-generate-lighter-darker-color)\n   */\n\n  function colorLuminance(hex, lum) {\n    // Validate hex string\n    hex = String(hex).replace(/[^0-9a-f]/gi, '');\n    if (hex.length < 6) {\n      hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];\n    }\n    lum = lum || 0;\n\n    // Convert to decimal and change luminosity\n    var rgb = \"#\", c, i;\n    for (i = 0; i < 3; i++) {\n      c = parseInt(hex.substr(i*2,2), 16);\n      c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);\n      rgb += (\"00\"+c).substr(c.length);\n    }\n\n    return rgb;\n  }\n\n  function extend(a, b){\n    for (var key in b) {\n      if (b.hasOwnProperty(key)) {\n        a[key] = b[key];\n      }\n    }\n\n    return a;\n  }\n\n  function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) : null;\n  }\n\n  // Add box-shadow style to button (depending on its chosen bg-color)\n  function setFocusStyle($button, bgColor) {\n    var rgbColor = hexToRgb(bgColor);\n    $button.style.boxShadow = '0 0 2px rgba(' + rgbColor +', 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)';\n  }\n\n\n  // Animation when opening modal\n  function openModal() {\n    var modal = getModal();\n    fadeIn(getOverlay(), 10);\n    show(modal);\n    addClass(modal, 'showSweetAlert');\n    removeClass(modal, 'hideSweetAlert');\n\n    previousActiveElement = document.activeElement;\n    var $okButton = modal.querySelector('button.confirm');\n    $okButton.focus();\n\n    setTimeout(function() {\n      addClass(modal, 'visible');\n    }, 500);\n\n    var timer = modal.getAttribute('data-timer');\n\n    if (timer !== \"null\" && timer !== \"\") {\n      modal.timeout = setTimeout(function() {\n        sweetAlert.close();\n      }, timer);\n    }\n  }\n\n\n  // Aninmation when closing modal\n  sweetAlert.close = swal.close = function() {\n    var modal = getModal();\n\n    fadeOut(getOverlay(), 5);\n    fadeOut(modal, 5);\n    removeClass(modal, 'showSweetAlert');\n    addClass(modal, 'hideSweetAlert');\n    removeClass(modal, 'visible');\n\n\n    // Reset icon animations\n\n    var $successIcon = modal.querySelector('.sa-icon.sa-success');\n    removeClass($successIcon, 'animate');\n    removeClass($successIcon.querySelector('.sa-tip'), 'animateSuccessTip');\n    removeClass($successIcon.querySelector('.sa-long'), 'animateSuccessLong');\n\n    var $errorIcon = modal.querySelector('.sa-icon.sa-error');\n    removeClass($errorIcon, 'animateErrorIcon');\n    removeClass($errorIcon.querySelector('.sa-x-mark'), 'animateXMark');\n\n    var $warningIcon = modal.querySelector('.sa-icon.sa-warning');\n    removeClass($warningIcon, 'pulseWarning');\n    removeClass($warningIcon.querySelector('.sa-body'), 'pulseWarningIns');\n    removeClass($warningIcon.querySelector('.sa-dot'), 'pulseWarningIns');\n\n\n    removeClass(document.body, 'stop-scrolling');\n\n    // Reset the page to its previous state\n    window.onkeydown = previousWindowKeyDown;\n    if (previousActiveElement) {\n      previousActiveElement.focus();\n    }\n    lastFocusedButton = undefined;\n    clearTimeout(modal.timeout);\n  };\n\n\n  /*\n   * Validation of the input field is done by user\n   * If something is wrong => call showInputError with errorMessage\n   */\n\n  sweetAlert.showInputError = swal.showInputError = function(errorMessage) {\n    var modal = getModal();\n\n    var $errorIcon = modal.querySelector('.sa-input-error');\n    addClass($errorIcon, 'show');\n\n    var $errorContainer = modal.querySelector('.sa-error-container');\n    addClass($errorContainer, 'show');\n\n    $errorContainer.querySelector('p').innerHTML = errorMessage;\n\n    modal.querySelector('input').focus();\n  };\n\n  function resetInput() {\n    var $modal = getModal();\n    var $input = getInput();\n\n    removeClass($modal, 'show-input');\n    $input.value = \"\";\n    $input.setAttribute('type', defaultParams.inputType);\n\n    swal.resetInputError();\n  }\n\n  sweetAlert.resetInputError = swal.resetInputError = function(event) {\n    // If press enter => ignore\n    if (event && event.keyCode === 13) {\n      return false;\n    }\n    \n    var $modal = getModal();\n\n    var $errorIcon = $modal.querySelector('.sa-input-error');\n    removeClass($errorIcon, 'show');\n\n    var $errorContainer = $modal.querySelector('.sa-error-container');\n    removeClass($errorContainer, 'show');\n  };\n  \n\n\n  /*\n   * Set \"margin-top\"-property on modal based on its computed height\n   */\n\n  function fixVerticalPosition() {\n    var modal = getModal();\n\n    modal.style.marginTop = getTopMargin(getModal());\n  }\n\n  // If browser is Internet Explorer 8\n  function isIE8() {\n    if (window.attachEvent && !window.addEventListener) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Error messages for developers\n  function logStr(string) {\n    if (window.console) { // IE...\n      window.console.log(\"SweetAlert: \" + string);\n    }\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define(function() { return sweetAlert; });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = sweetAlert;\n  } else if (typeof window !== 'undefined') {\n    window.sweetAlert = window.swal = sweetAlert;\n  }\n\n})(window, document);\n"]}